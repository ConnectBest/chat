name: Build, Push & Deploy

on:
  push:
    branches: [main]
  workflow_dispatch: {}

env:
  # Shared org vars
  AWS_REGION:       ${{ vars.AWS_REGION }}        # private ECR region (e.g., us-west-2)
  AWS_ACCOUNT_ID:   ${{ vars.AWS_ACCOUNT_ID }}
  ECR_PUBLIC_ALIAS: ${{ vars.ECR_PUBLIC_ALIAS }}  # e.g., connectbest (or g6a9d7h6 until alias is live)

  # Repo var
  ECR_PUBLIC_REPO:  ${{ vars.ECR_PUBLIC_REPO }}   # e.g., chat

  # Tags
  IMAGE_TAG_SHA: ${{ github.sha }}
  IMAGE_TAG_REF: ${{ github.ref_name }}

  # Lightsail
  LIGHTSAIL_SERVICE: chat-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      actions: write   # needed for buildx cache "gha"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Ensure private repo exists (region = private ECR region)
      - name: Ensure Private ECR repo exists
        run: |
          aws ecr describe-repositories \
            --region "${AWS_REGION}" \
            --repository-names "${ECR_PUBLIC_REPO}" >/dev/null 2>&1 || \
          aws ecr create-repository \
            --region "${AWS_REGION}" \
            --repository-name "${ECR_PUBLIC_REPO}" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256

      # Ensure public repo exists (ECR Public auth lives in us-east-1)
      - name: Ensure Public ECR repo exists (us-east-1)
        run: |
          aws ecr-public describe-repositories --region us-east-1 \
            --repository-names "${ECR_PUBLIC_REPO}" >/dev/null 2>&1 || \
          aws ecr-public create-repository --region us-east-1 \
            --repository-name "${ECR_PUBLIC_REPO}" >/dev/null

      # Logins
      - name: Login to Private ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to Public ECR
        env:
          AWS_REGION: us-east-1        # required for ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Compute image URIs
        id: uris
        run: |
          echo "PUBLIC_URI=public.ecr.aws/${ECR_PUBLIC_ALIAS}/${ECR_PUBLIC_REPO}" >> $GITHUB_OUTPUT
          echo "PRIVATE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_PUBLIC_REPO}" >> $GITHUB_OUTPUT

      - name: Build & Push to both registries
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            CACHEBUST=${{ github.run_number }}
          tags: |
            ${{ steps.uris.outputs.PUBLIC_URI }}:latest
            ${{ steps.uris.outputs.PUBLIC_URI }}:${{ env.IMAGE_TAG_SHA }}
            ${{ steps.uris.outputs.PUBLIC_URI }}:${{ env.IMAGE_TAG_REF }}
            ${{ steps.uris.outputs.PRIVATE_URI }}:latest
            ${{ steps.uris.outputs.PRIVATE_URI }}:${{ env.IMAGE_TAG_SHA }}
            ${{ steps.uris.outputs.PRIVATE_URI }}:${{ env.IMAGE_TAG_REF }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output pushed tags
        run: |
          echo "Public:  ${{ steps.uris.outputs.PUBLIC_URI }}:{latest,${{ env.IMAGE_TAG_SHA }},${{ env.IMAGE_TAG_REF }}}"
          echo "Private: ${{ steps.uris.outputs.PRIVATE_URI }}:{latest,${{ env.IMAGE_TAG_SHA }},${{ env.IMAGE_TAG_REF }}}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Lightsail
        run: |
          echo "Checking deployment status..."

          # Wait for any in-progress deployment to complete (max 5 minutes)
          for i in $(seq 1 30); do
            STATE=$(aws lightsail get-container-services \
              --service-name ${{ env.LIGHTSAIL_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'containerServices[0].state' \
              --output text)

            if [ "$STATE" = "RUNNING" ] || [ "$STATE" = "READY" ]; then
              echo "Service is ready for deployment"
              break
            fi

            echo "Service state: $STATE - waiting... ($i/30)"
            sleep 10
          done

          # Deploy
          aws lightsail create-container-service-deployment \
            --service-name ${{ env.LIGHTSAIL_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --cli-input-json file://lightsail/deployment.json || {
              echo "Deployment failed, checking if already in progress..."
              exit 1
            }

      - name: Get deployment URL
        run: |
          echo "Deployment URL:"
          aws lightsail get-container-services \
            --service-name ${{ env.LIGHTSAIL_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'containerServices[0].url' \
            --output text